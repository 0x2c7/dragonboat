/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/lni/dragonboat/binding */


#line 1 "cgo-builtin-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

typedef struct { const char *p; ptrdiff_t n; } _GoString_;

#endif

/* Start of preamble from import "C" comments.  */


#line 24 "binding.go"


#include "dragonboat/binding.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

typedef _GoString_ GoString;
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// GetManagedObjectCount returns the count of the managed object.

extern GoUint64 GetManagedObjectCount();

// GetInterestedGoroutines returns a managed collection of existing goroutines.

extern GoUint64 GetInterestedGoroutines();

// AssertNoGoroutineLeak checks whether there is any leaked goroutine. The
// program will panic if there is any identified leaked goroutine.

extern void AssertNoGoroutineLeak(GoUint64 p0);

// TestLatency is a simple function used for measuring C to Go function call
// latency.

extern GoUint64 TestLatency(GoUint64 p0);

// JoinIOServiceThreads joins IO Service threads managed by Go.

extern void JoinIOServiceThreads(GoUint64 p0);

// RunIOServiceInGo runs IO service using Go managed thread.

extern GoUint64 RunIOServiceInGo(void* p0, GoInt p1);

// RemoveManagedObject removes the specified Go object from the system.

extern void RemoveManagedObject(GoUint64 p0);

// SetLogLevel sets the log level of the specified package.

extern GoInt SetLogLevel(DBString p0, GoInt p1);

// SelectOnRequestStateForMembershipChange selects on the RequestState and
// wait until the CompleteC channel to be signaled.

extern GoInt SelectOnRequestStateForMembershipChange(GoUint64 p0);

// SessionProposalCompleted marks the client session instance specified
// by the object id value csoid as proposal completed. This makes the client
// session ready to be used for further proposals.

extern void SessionProposalCompleted(GoUint64 p0);

// CreateSession creates a new client session object for the specified
// cluster.

extern GoUint64 CreateSession(GoUint64 p0);

// CreateNoOPSession creates a new NoOP client session object ready
// to be used for making proposals.

extern GoUint64 CreateNoOPSession(GoUint64 p0);

// NewNodeHost creates a new NodeHost instance and return the object id of the
// new NodeHost instance.

extern GoUint64 NewNodeHost(NodeHostConfig p0);

// StopNodeHost stops the specified NodeHost instance.

extern void StopNodeHost(GoUint64 p0);

// NodeHostStartCluster adds a new raft cluster node to be managed by the
// specified NodeHost and start the node to make it ready to accept incoming
// requests.

extern GoInt NodeHostStartCluster(GoUint64 p0, uint64_t* p1, DBString* p2, size_t p3, char p4, DBString p5, RaftConfig p6);

// NodeHostStopCluster removes the specified raft cluster node from the
// NodeHost instance and stops the running node.

extern GoInt NodeHostStopCluster(GoUint64 p0, GoUint64 p1);

/* Return type for NodeHostGetNewSession */
struct NodeHostGetNewSession_return {
	GoUint64 r0;
	GoInt r1;
};

// NodeHostGetNewSession creates a new client session instance ready to
// be used for making proposals.

extern struct NodeHostGetNewSession_return NodeHostGetNewSession(GoUint64 p0, GoUint64 p1, GoUint64 p2);

// NodeHostCloseSession closes the specified client session instance.

extern GoInt NodeHostCloseSession(GoUint64 p0, GoUint64 p1, GoUint64 p2);

/* Return type for NodeHostSyncPropose */
struct NodeHostSyncPropose_return {
	GoUint64 r0;
	GoInt r1;
};

// NodeHostSyncPropose makes a new proposal on the specified NodeHost instance.

extern struct NodeHostSyncPropose_return NodeHostSyncPropose(GoUint64 p0, GoUint64 p1, GoUint64 p2, GoUint8 p3, unsigned char* p4, size_t p5);

/* Return type for NodeHostPropose */
struct NodeHostPropose_return {
	GoUint64 r0;
	GoInt r1;
};

// NodeHostPropose makes a new async proposal.

extern struct NodeHostPropose_return NodeHostPropose(GoUint64 p0, GoUint64 p1, GoUint64 p2, GoUint8 p3, GoUint8 p4, unsigned char* p5, size_t p6, void* p7, GoInt p8);

/* Return type for NodeHostProposeSession */
struct NodeHostProposeSession_return {
	GoUint64 r0;
	GoInt r1;
};

// NodeHostProposeSession makes a asynchronous proposal on the specified
// cluster for client session related operation.

extern struct NodeHostProposeSession_return NodeHostProposeSession(GoUint64 p0, GoUint64 p1, GoUint64 p2, GoUint8 p3, GoUint8 p4, void* p5, GoInt p6);

/* Return type for NodeHostSyncRead */
struct NodeHostSyncRead_return {
	GoInt r0;
	GoInt r1;
};

// NodeHostSyncRead makes a linearizable read on the specified
// NodeHost instance.

extern struct NodeHostSyncRead_return NodeHostSyncRead(GoUint64 p0, GoUint64 p1, GoUint64 p2, unsigned char* p3, size_t p4, unsigned char* p5, size_t p6);

/* Return type for NodeHostReadIndex */
struct NodeHostReadIndex_return {
	GoUint64 r0;
	GoInt r1;
};

// NodeHostReadIndex starts the ReadIndex protocol to get ready for a
// linearizable read.

extern struct NodeHostReadIndex_return NodeHostReadIndex(GoUint64 p0, GoUint64 p1, GoUint64 p2, void* p3, GoInt p4);

/* Return type for NodeHostReadLocal */
struct NodeHostReadLocal_return {
	GoInt r0;
	GoInt r1;
};

// NodeHostReadLocal makes a local read on the specified StateMachine.

extern struct NodeHostReadLocal_return NodeHostReadLocal(GoUint64 p0, GoUint64 p1, unsigned char* p2, size_t p3, unsigned char* p4, size_t p5);

/* Return type for NodeHostRequestAddNode */
struct NodeHostRequestAddNode_return {
	GoUint64 r0;
	GoInt r1;
};

// NodeHostRequestAddNode requests the specified new node to be added to the
// specified raft cluster.

extern struct NodeHostRequestAddNode_return NodeHostRequestAddNode(GoUint64 p0, GoUint64 p1, GoUint64 p2, GoUint64 p3, DBString p4, GoUint64 p5);

/* Return type for NodeHostRequestDeleteNode */
struct NodeHostRequestDeleteNode_return {
	GoUint64 r0;
	GoInt r1;
};

// NodeHostRequestDeleteNode requests the specified node to be removed from the
// specified raft cluster.

extern struct NodeHostRequestDeleteNode_return NodeHostRequestDeleteNode(GoUint64 p0, GoUint64 p1, GoUint64 p2, GoUint64 p3, GoUint64 p4);

/* Return type for NodeHostRequestAddObserver */
struct NodeHostRequestAddObserver_return {
	GoUint64 r0;
	GoInt r1;
};

// NodeHostRequestAddObserver requests the specified new node to be added to
// the specified cluster as observer.

extern struct NodeHostRequestAddObserver_return NodeHostRequestAddObserver(GoUint64 p0, GoUint64 p1, GoUint64 p2, GoUint64 p3, DBString p4, GoUint64 p5);

// NodeHostRequestLeaderTransfer request to transfer leadership to the
// specified target node on the specified cluster.

extern GoInt NodeHostRequestLeaderTransfer(GoUint64 p0, GoUint64 p1, GoUint64 p2);

/* Return type for NodeHostGetClusterMembership */
struct NodeHostGetClusterMembership_return {
	Membership* r0;
	GoUint64 r1;
	GoInt r2;
};

// NodeHostGetClusterMembership returns the membership of the specified cluster.

extern struct NodeHostGetClusterMembership_return NodeHostGetClusterMembership(GoUint64 p0, GoUint64 p1, GoUint64 p2);

/* Return type for NodeHostGetLeaderID */
struct NodeHostGetLeaderID_return {
	GoUint64 r0;
	GoUint8 r1;
	GoInt r2;
};

// NodeHostGetLeaderID returns the leader ID of the specified cluster.

extern struct NodeHostGetLeaderID_return NodeHostGetLeaderID(GoUint64 p0, GoUint64 p1);

#ifdef __cplusplus
}
#endif
